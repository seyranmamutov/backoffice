package org.seyran.backoffice.controller.exception;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.http.HttpServletRequest;
import javax.validation.ConstraintViolationException;
import lombok.extern.slf4j.Slf4j;
import org.seyran.backoffice.service.ResourceNotFoundException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

@Slf4j
@ControllerAdvice
public class ExceptionHandlerService {
  // todo move this to resource bundle
  private static final String INTEGRITY_VIOLATION_CONSTRAINT =
      "Action can not be performed because of integrity violation";
  private static final String BAD_INPUT_MSG = "Bad input";
  private static final String BAD_REQUEST_MSG = "Bad request";
  private static final String TYPE_MISMATCH_MSG = "Type mismatch";

  @ExceptionHandler(ResourceNotFoundException.class)
  public ResponseEntity resourceNotFoundException(
      ResourceNotFoundException ex) {
    return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
  }

  /**
   * Required params are missing or wrong. Error details is returned in body.
   */
  @ExceptionHandler(MethodArgumentNotValidException.class)
  public ResponseEntity<ErrorDetail> methodArgumentNotValidException(
      MethodArgumentNotValidException ex) {
    ErrorDetail errorDetails = new ErrorDetail();
    List<FieldError> fieldErrors = ex.getBindingResult().getFieldErrors();
    errorDetails.setForm(
        fieldErrors.stream().map(ErrorDetail.FormControlError::of).collect(Collectors.toList()));
    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorDetails);
  }

  /**
   * Database constrain violation.
   */
  @ExceptionHandler(ConstraintViolationException.class)
  public ResponseEntity<ErrorDetail> onConstraintValidationException(
      ConstraintViolationException e) {
    ErrorDetail errorDetails = new ErrorDetail();

    List<ErrorDetail.FormControlError> errors =
        e.getConstraintViolations().stream()
            .map(ErrorDetail.FormControlError::of)
            .collect(Collectors.toList());
    errorDetails.setForm(errors);

    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorDetails);
  }

  /**
   * Database constrain violation.
   */
  @ExceptionHandler(DataIntegrityViolationException.class)
  public ResponseEntity<ErrorDetail> onDataIntegrityViolationException(
      DataIntegrityViolationException e) {
    ErrorDetail errorDetails =
        new ErrorDetail(EntityErrorMsgKey.INTEGRITY_VIOLAION, INTEGRITY_VIOLATION_CONSTRAINT);

    errorDetails.setKey(EntityErrorMsgKey.INTEGRITY_VIOLAION);

    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorDetails);
  }

  /**
   * See @{@link IllegalStateException}.
   */
  @ExceptionHandler(IllegalStateException.class)
  public ResponseEntity<ErrorDetail> onIllegalStateException(IllegalStateException e) {
    ErrorDetail errorDetails = new ErrorDetail();

    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorDetails);
  }

  /**
   * See @{@link HttpMessageNotReadableException}.
   */
  @ExceptionHandler(HttpMessageNotReadableException.class)
  public ResponseEntity<ErrorDetail> httpMessageNotReadableException(
      HttpMessageNotReadableException ex) {
    if (ex.getCause() instanceof InvalidFormatException) {
      // for InvalidFormatException, build field path like it generated by javax
      // example:
      // data[0].price
      // user.profile.email
      InvalidFormatException ife = (InvalidFormatException) ex.getCause();
      List<JsonMappingException.Reference> path = ife.getPath();
      StringBuilder field = new StringBuilder();
      for (JsonMappingException.Reference reference : path) {
        String fieldName = reference.getFieldName();
        if (reference.getFrom() instanceof List) {
          field.append("[").append(reference.getIndex()).append("]");
        } else {
          if (field.length() > 0) {
            field.append(".");
          }
          field.append(fieldName);
        }
      }
      return ResponseEntity.status(HttpStatus.BAD_REQUEST)
          .body(new ErrorDetail(field.toString(), BAD_INPUT_MSG));
    } else {
      return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(getCommonError(ex));
    }
  }

  private ErrorDetail getCommonError(Exception ex) {
    log.warn("bad request - common error", ex);
    return new ErrorDetail(EntityErrorMsgKey.BAD_REQUEST_COMMON, BAD_REQUEST_MSG);
  }

  /**
   * Required params are wrong. Error details is returned in body. 
   */
  @ExceptionHandler(MethodArgumentTypeMismatchException.class)
  public ResponseEntity<ErrorDetail> methodArgumentTypeMismatchException(
      MethodArgumentTypeMismatchException ex) {
    ErrorDetail errorDetails = getCommonError(ex);
    errorDetails.setForm(
        Arrays.asList(ErrorDetail.FormControlError.of(ex.getName(), TYPE_MISMATCH_MSG)));
    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorDetails);
  }

  @ExceptionHandler(MissingServletRequestParameterException.class)
  public ResponseEntity missingServletRequestParameterException(
      MissingServletRequestParameterException ex) {
    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
  }

  @ExceptionHandler(InvalidDataAccessApiUsageException.class)
  public ResponseEntity invalidDataAccessApiUsageException(InvalidDataAccessApiUsageException ex) {
    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
  }

  @ExceptionHandler(IllegalArgumentException.class)
  public ResponseEntity illegalArgumentException(IllegalArgumentException ex) {
    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
  }

  /**
   * Generate server error (500) and log error message.
   */
  @ExceptionHandler(Exception.class)
  public ResponseEntity exception(HttpServletRequest request, Exception ex) {

    // log request method, URL and stacktrace
    log.error("unhandled error", ex);
    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
        .header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_VALUE)
        .build();
  }
}
